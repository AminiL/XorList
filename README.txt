Напишите шаблонный класс XorList - реализацию структуры данных, которая умеет все то же, что и обычный list, с той же асимптотикой, но экономнее расходует память: помимо полезной информации, каждая нода требует лишь sizeof(Node*) дополнительной памяти, а не 2*sizeof(Node*), как в обычном list’e. Общее описание этой структуры данных можно найти в Википедии.

У класса должно быть два шаблонных параметра: тип данных, хранящийся в списке, и тип используемого аллокатора. Должно быть реализовано следующее (полужирным шрифтом выделены пункты, необходимые в первую очередь - при проверке им будет уделяться особое внимание):

Конструкторы:
explicit XorList(const Allocator& alloc = Allocator());
XorList(size_type count, const T& value = T(), const Allocator& alloc = Allocator());

Конструктор копирования, конструктор перемещения, деструктор, копирующий и перемещающий операторы присваивания;

Метод size(), работающий за O(1);

Методы push_back, push_front, pop_back, pop_front, корректно работающие как с lvalue, так и с rvalue-ссылками;

Двунаправленные итераторы (константные итераторы писать необязательно);

Правильное выделение и освобождение памяти через аллокатор (должен поддерживаться как std::allocator, так и StackAllocator);

Методы insert_before(iterator, const T&), insert_before(iterator, T&&), insert_after(iterator, const T&), insert_after(iterator, T&&), erase(iterator) - для удаления и добавления одиночных элементов в список.
